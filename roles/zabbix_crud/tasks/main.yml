---
# tasks file for zabbix_crud

- block:

  - name: '[Zabbix CRUD] Register password access'
    set_fact:
      password_access:
        "{{ zabbix_api_http_password is defined and zabbix_api_http_password is string and zabbix_api_http_password | length > 0 }}"

  - name: '[Zabbix CRUD] Register token access'
    set_fact:
      token_access:
        "{{ zabbix_api_auth_key is defined and zabbix_api_auth_key is string and zabbix_api_auth_key | length > 0 }}"

  - name: '[Zabbix CRUD] Check conflict between token and password access configuration'
    ansible.builtin.debug:
      msg: "Token method and user/password method was detected, proceeding with token method."
    when: password_access and token_access

  - name: '[Zabbix CRUD] Set common facts connection v√≠a API'
    ansible.builtin.set_fact:
      ansible_network_os: community.zabbix.zabbix
      ansible_connection: httpapi
      ansible_httpapi_port: "{{ zabbix_api_server_port }}"
      ansible_httpapi_use_ssl: "{{ zabbix_api_use_ssl }}"
      ansible_httpapi_validate_certs: "{{ zabbix_api_validate_certs }}"
      ansible_zabbix_url_path: "{{ zabbix_api_url_path }}"

  - name: '[Zabbix CRUD] Set password access'
    ansible.builtin.set_fact:
      ansible_user: "{{ zabbix_api_http_user }}"
      ansible_httpapi_pass: "{{ zabbix_api_http_password }}"
    when: not token_access

  - name: '[Zabbix CRUD] Set token access'
    ansible.builtin.set_fact:
      ansible_zabbix_auth_key: "{{ zabbix_api_auth_key }}"
    when: token_access

  tags: always

- name: '[Zabbix CRUD] Wrap for zabbix_group - Create/Update/Delete Zabbix Host Groups'
  become: false
  community.zabbix.zabbix_group:
    host_groups: "{{ item.host_group }}"
    state: "{{ item.state | default(omit) }}"
  loop: "{{ zabbix_crud_host_groups }}"
  tags: zabbix_crud_host_groups

- name: '[Zabbix CRUD] Wrap for zabbix_mediatype module - Create/Update/Delete Zabbix media types'
  become: false
  community.zabbix.zabbix_mediatype:
    name: "{{ item.name }}"
    type: "{{ item.type }}"
    attempt_interval: "{{ item.attempt_interval | default(omit) }}"
    description: "{{ item.description | default(omit) }}"
    event_menu: "{{ item.event_menu | default(omit) }}"
    event_menu_name: "{{ item.event_menu_name | default(omit) }}"
    event_menu_url: "{{ item.event_menu_url | default(omit) }}"
    gsm_modem: "{{ item.gsm_modem | default(omit) }}"
    max_attempts: "{{ item.max_attempts | default(omit) }}"
    max_sessions: "{{ item.max_sessions | default(omit) }}"
    message_templates: "{{ item.message_templates | default(omit) }}"
    message_text_limit: "{{ item.message_text_limit | default(omit) }}"
    password:  "{{ item.password | default(omit) }}"
    process_tags: "{{ item.process_tags | default(omit) }}"
    script_name: "{{ item.script_name | default(omit) }}"
    script_params: "{{ item.script_params | default(omit) }}"
    smtp_authentication:  "{{ item.smtp_authentication | default(omit) }}"
    smtp_email: "{{ item.smtp_email | default(omit) }}"
    smtp_helo: "{{ item.smtp_helo | default(omit) }}"
    smtp_security: "{{ item.smtp_security | default(omit) }}"
    smtp_server: "{{ item.smtp_server | default(omit) }}"
    smtp_server_port: "{{ item.smtp_server_port | default(omit) }}"
    smtp_verify_host: "{{ item.smtp_verify_host | default(omit) }}"
    smtp_verify_peer: "{{ item.smtp_verify_peer | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    status: "{{ item.status | default(omit) }}"
    username:  "{{ item.username | default(omit) }}"
    webhook_params: "{{ item.webhook_params | default(omit) }}"
    webhook_script: "{{ item.webhook_script | default(omit) }}"
    webhook_timeout: "{{ item.webhook_timeout | default(omit) }}"
  loop: "{{ zabbix_crud_mediatypes }}"
  tags: zabbix_crud_mediatypes

- name: '[Zabbix CRUD] Wrap for zabbix_usergroup module - Create/Update/Delete Zabbix User Groups'
  become: false
  community.zabbix.zabbix_usergroup:
    name: "{{ item.name }}"
    debug_mode: "{{ item.debug_mode | default(omit) }}"
    gui_access: "{{ item.gui_access | default(omit) }}"
    hostgroup_rights: "{{ item.hostgroup_rights | default(omit) }}"
    rights: "{{ item.rights | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    status: "{{ item.status | default(omit) }}"
    tag_filters: "{{ item.tag_filters | default(omit) }}"
    templategroup_rights: "{{ item.templategroup_rights | default(omit) }}"
    userdirectory: "{{ item.userdirectory | default(omit) }}"
  loop: "{{ zabbix_crud_usergroups }}"
  tags: zabbix_crud_usergroups

- name: '[Zabbix CRUD] Wrap for zabbix_user_role module - Create/Update/Delete Zabbix User Roles'
  become: false
  community.zabbix.zabbix_user_role:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    type: "{{ item.type | default('User') }}"
    rules: "{{ item.rules | default(omit) }}"
  loop: "{{ zabbix_crud_user_roles }}"
  tags: zabbix_crud_user_roles

- name: '[Zabbix CRUD] Wrap for zabbix_user module - Create/Update/Delete Zabbix Users'
  become: false
  community.zabbix.zabbix_user:
    username: "{{ item.username }}"
    usrgrps: "{{ item.usrgrps }}"
    passwd: "{{ item.passwd }}"
    after_login_url: "{{ item.after_login_url | default(omit) }}"
    autologin: "{{ item.autologin | default(omit) }}"
    autologout: "{{ item.autologout | default(omit) }}"
    current_password: "{{ item.current_password | default(omit) }}"
    lang: "{{ item.lang | default(omit) }}"
    name: "{{ item.name | default(omit) }}"
    override_passwd: "{{ item.override_passwd | default(omit) }}"
    refresh: "{{ item.refresh | default(omit) }}"
    role_name: "{{ item.role_name | default(omit) }}"
    rows_per_page: "{{ item.rows_per_page | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    surname: "{{ item.surname | default(omit) }}"
    theme: "{{ item.theme | default(omit) }}"
    timezone: "{{ item.timezone | default(omit) }}"
    user_medias: "{{ item.user_medias | default(omit) }}"
  no_log: true
  loop: "{{  zabbix_crud_users }}"
  tags: zabbix_crud_users

- name: '[Zabbix CRUD] Import provided JSON templates'
  become: false
  community.zabbix.zabbix_template:
    template_json: "{{ lookup('file', item ) }}"
    state: present
  loop: "{{ zabbix_crud_json_templates }}"
  tags: zabbix_crud_json_templates

- name: '[Zabbix CRUD] Wrap for zabbix_host module - Create/Update/Delete Zabbix Hosts'
  become: false
  community.zabbix.zabbix_host:
    host_name: "{{ item.host_name }}"
    visible_name: "{{ item.visible_name | default(omit) }}"
    ca_cert: "{{ item.ca_cert | default(omit) }}"
    tls_accept: "{{ item.tls_accept | default(omit) }}"
    tls_connect: "{{ item.tls_connect | default(omit) }}"
    tls_psk: "{{ item.tls_psk | default(omit) }}"
    tls_psk_identity: "{{ item.tls_psk_identity | default(omit) }}"
    tls_subject: "{{ item.tls_subject | default(omit) }}"
    description: "{{ item.description | default(omit) }}"
    host_groups: "{{ item.host_groups }}"
    link_templates: "{{ item.link_templates | default(omit) }}"
    status: "{{ item.status | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    interfaces: "{{ item.interfaces | default(omit) }}"
    proxy: "{{ item.proxy | default(omit) }}"
    macros: "{{ item.macros | default(omit) }}"
    tags: "{{ item.tags | default(omit) }}"
    force: "{{ item.force | default(omit) }}"
    inventory_mode: "{{ item.inventory_mode | default(omit) }}"
    inventory_zabbix: "{{ item.inventory_zabbix | default(omit) }}"
    ipmi_authtype: "{{ item.ipmi_authtype | default(omit) }}"
    ipmi_password: "{{ item.ipmi_password | default(omit) }}"
    ipmi_privilege: "{{ item.ipmi_privilege | default(omit) }}"
    ipmi_username: "{{ item.ipmi_username | default(omit) }}"
  loop: "{{  zabbix_crud_hosts }}"
  tags:  zabbix_crud_hosts

- name: '[Zabbix CRUD] Wrap for zabbix_script module - Create/Update/Delete Zabbix Scripts'
  become: false
  community.zabbix.zabbix_script:
    name: "{{ item.name }}"
    command: "{{ item.command }}"
    script_type: "{{ item.script_type }}"
    authtype: "{{ item.authtype | default(omit) }}"
    confirmation: "{{ item.confirmation | default(omit) }}"
    description: "{{ item.description | default(omit) }}"
    execute_on: "{{ item.execute_on | default(omit) }}"
    host_access: "{{ item.host_access | default(omit) }}"
    host_group: "{{ item.host_group | default(omit) }}"
    menu_path: "{{ item.menu_path | default(omit) }}"
    parameters: "{{ item.parameters | default(omit) }}"
    password: "{{ item.password | default(omit) }}"
    port: "{{ item.port | default(omit) }}"
    privatekey: "{{ item.privatekey | default(omit) }}"
    publickey: "{{ item.publickey | default(omit) }}"
    scope: "{{ item.scope | default(omit) }}"
    script_timeout: "{{ item.script_timeout | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    user_group: "{{ item.user_group | default(omit) }}"
    username: "{{ item.username | default(omit) }}"
  loop: "{{ zabbix_crud_scripts }}"
  tags: zabbix_crud_scripts

- name: '[Zabbix CRUD] Wrap for zabbix_action module - Create/Update/Delete Zabbix Actions'
  become: false
  community.zabbix.zabbix_action:
    name: "{{ item.name }}"
    acknowledge_operations: "{{ item.acknowledge_operations | default(omit) }}"
    conditions: "{{ item.conditions | default(omit) }}"
    esc_period: "{{ item.esc_period | default(omit) }}"
    eval_type: "{{ item.eval_type | default(omit) }}"
    event_source: "{{ item.event_source | default('trigger') }}"
    formula: "{{ item.formula | default(omit) }}"
    notify_if_canceled: "{{ item.notify_if_canceled | default(omit) }}"
    operations: "{{ item.operations | default(omit) }}"
    pause_in_maintenance: "{{ item.pause_in_maintenance | default(omit) }}"
    pause_symptoms: "{{ item.pause_symptoms | default(omit) }}"
    recovery_operations: "{{ item.recovery_operations | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    status: "{{ item.status | default(omit) }}"
  loop: "{{ zabbix_crud_actions }}"
  tags: zabbix_crud_actions
